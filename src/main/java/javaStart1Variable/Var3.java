package javaStart1Variable;

public class Var3 {

    public static void main(String[] args) {

        int a = 100; // 정수
        double b = 10.5; // 실수
        boolean c = true; // 불리언 true, false
        char d = 'A'; // 문자 하나
        String e = "Hello"; // 문자열, 특별한 타입

        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        System.out.println(d);
        System.out.println(e);

        //정수
        byte bb = 127; //-128 ~ 127
        short s = 32767; // -32,768 ~ 32,767
        int i = 2147483647; //-2,147,483,648 ~ 2,147,483,647 (약 20억)

        //-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
        long l = 9223372036854775807L;

        //실수
        float f = 10.0f;
        double dd = 10.0;
    }
}

/** 변수 타입
 * 변수는 데이터를 다루는 종류에 따라 다양한 형식이 존재한다. 이러한 형식을 영어로는 `타입`(type)이라 하고 우리말로는 `형식` 또는 `형` 이라 한다.
 * int` : 정수를 다룬다.
 * double` : 실수를 다룬다.
 * `boolean` : 불리언 타입이라 한다. `true` , `false` 값만 사용할 수 있다. 주로 참과 거짓을 판단하는 곳에서 사용한다.
 * char` : 문자 하나를 다룰 때 사용한다. 작은따옴표`'`를 사용해서 감싸야 한다.
 * `String` : 문자열을 다룬다. 큰따옴표를 사용해야 한다. 첫 글자가 대문자로 시작하는 특별한 타입이다. (클래스 참고)
 */

/** 리터럴
 *  코드에서 개발자가 직접 적은 `100`, `10.5`, `true`, `'A'`, `"Hello"` 와 같은 고정된 값을 프로그래밍 용어로 리터럴(literal)이라 한다.
 *  변수의 값은 변할 수 있지만 리터럴은 개발자가 직접 입력한 고정된 값이다. 따라서 리터럴 자체는 변하지 않는다.
 */

/** 숫자 타입
 * 표현할 수 있는 숫자의 범위와 차지하는 메모리 공간은 다음과 같다.
 * 자바는 기본으로 4byte(`int` )를 효율적으로 계산하도록 설계되어 있다.
 * byte` : -128 ~ 127 (1byte, 2⁸) 파일을 바이트 단위로 다루기 때문에 파일 전송, 파일 복사 등에 주로 사용
 * short` : -32,768 ~ 32,767 (2byte, 2¹⁶)
 * int` : -2,147,483,648 ~ 2,147,483,647 (약 20억) (4byte, 2³²)
 * long` : -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 (8byte, 2⁶⁴)
 * float` : 대략 -3.4E38 ~ 3.4E38, 7자리 정밀도 (4byte, 2³²)
 * double` : 대략 -1.7E308 ~ 1.7E308, 15자리 정밀도 (8byte, 2⁶⁴)
 * boolean` : `true` , `false` (1byte)
 * char` : 문자 하나(2byte) 문자 하나를 표현할 때도 문자열을 사용할 수 있다.
 * String` : 문자열을 표현한다. 메모리 사용량은 문자 길이에 따라 동적으로 달라진다.
 * 정수 리터럴은 `int` 를 기본으로 사용한다
 * 실수 리터럴은 기본이 `double` 형을 사용한다. `float` 형을 사용하려면 `f` 를 붙여서 `float` 형으로 지정해야 한다.
 * 메모리 용량은 매우 저렴하다. 따라서 메모리 용량을 약간 절약하기 보다는 개발 속도나 효율에 초첨을 맞추는 것이 더 효과적이다.
 */

/** 변수 명명 규칙 : 자바에서 변수의 이름을 짓는데는 규칙과 관례가 있다.
 * 규칙
 * 변수 이름은 숫자로 시작할 수 없다. (예: `1num` , `1st` )
 * 그러나 숫자를 이름에 포함하는 것은 가능하다 (예: `myVar1` , `num1` ).
 * 이름에는 공백이 들어갈 수 없다.
 * 자바의 예약어를 변수 이름으로 사용할 수 없다. (예: `int` , `class` , `public` )
 * 변수 이름에는 영문자(`a-z` , `A-Z` ), 숫자(`0-9` ), 달러 기호(`$` ) 또는 밑줄(`_` )만 사용할 수 있다.
 * 관례
 * 소문자로 시작하는 낙타 표기법 : 변수 이름의 경우, 첫 번째 단어는 소문자로 시작하고 그 이후의 각 단어는 대문자로 시작하는 낙타 표기법(camel case)를 사용
 * 자바에서 클래스 이름의 첫 글자는 대문자로 시작한다. 나머지는 모두 첫 글자를 소문자로 시작한다.
 * 상수는 모두 대문자를 사용하고 언더바로 구분한다.
 * 패키지는 모두 소문자를 사용한다.
 * 변수 이름은 의미있고, 그 용도를 명확하게 설명해야 한다.
 */
